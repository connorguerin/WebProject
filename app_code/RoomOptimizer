Imports Microsoft.VisualBasic
Imports Microsoft.SolverFoundation.Services
'TODO run tests for only 1 day of optimization then figure out how to expand from there
Public Class RoomOptimizer
    Private myCustomerList As List(Of Customer) 'the incoming list of customers should be only the customers checking in for the day
    Private masterCustomerList As List(Of Customer)
    Private myRoomList As List(Of Room)
    Private masterRoomList As List(Of Room)
    Private myModel As Model
    Private myDecisionMatrix(,) As Decision
    Private Day As Integer

    Public Sub New(aCustomerList As List(Of Customer), aRoomList As List(Of Room), aday As DateTime)
        masterCustomerList = aCustomerList
        masterRoomList = aRoomList
        Dim customersCheckingIn As New List(Of Customer)
        Dim openRooms As New List(Of Room)
        Day = aday.DayOfYear

        For i = 0 To aCustomerList.Count - 1
            If aCustomerList.Item(i).getCheckin = Day Then
                customersCheckingIn.Add(aCustomerList.Item(i))
            End If
        Next

        For i = 0 To aRoomList.Count - 1
            If aRoomList.Item(i).Available = True Then
                openRooms.Add(aRoomList.Item(i))
            End If
        Next

        Dim size(openRooms.Count - 1, customersCheckingIn.Count - 1) As Decision
        myDecisionMatrix = size
        myCustomerList = customersCheckingIn
        myRoomList = openRooms
    End Sub

    Public Sub UpdateAvailabilityandCheckins()
        'update the availability of rooms
        For i = 0 To myRoomList.Count - 1
            Dim aRoom As Room = myRoomList.Item(i)
            For j = 0 To myCustomerList.Count - 1
                If myDecisionMatrix(i, j).ToDouble = 1 Then
                    VacancyChange(aRoom.RoomNum, True)
                End If
            Next
        Next
        'For i = 0 To masterRoomList.Count - 1
        '    Dim aRoom As Room = masterRoomList.Item(i)

        '    For j = 0 To masterCustomerList.Count - 1
        '        If (myDecisionMatrix(i, j).ToDouble = 1 And masterCustomerList.Item(j).getcheckout = Day) Then
        '            VacancyChange(aRoom.RoomNum, False)
        '        End If
        '    Next
        'Next

        myRoomList.Clear()
        myCustomerList.Clear()

        For i = 0 To masterRoomList.Count - 1
            If masterRoomList.Item(i).Available = True Then
                myRoomList.Add(masterRoomList.Item(i))
            End If
        Next
        For i = 0 To masterCustomerList.Count - 1
            If masterCustomerList.Item(i).getCheckin = Day Then
                myCustomerList.Add(masterCustomerList.Item(i))
            End If
        Next
        Dim size(myRoomList.Count - 1, myCustomerList.Count - 1) As Decision
        myDecisionMatrix = size

    End Sub

    Public Sub UpdateDay()
        Day += 1
    End Sub

    Public Sub VacancyChange(ByVal roomNo As Double, taken As Boolean)

        For i = 0 To masterRoomList.Count - 1
            If masterRoomList.Item(i).RoomNum = roomNo Then
                If (taken = True) Then
                    masterRoomList.Item(i).noLongerAvailable()
                Else
                    masterRoomList.Item(i).isNowAvailable()
                End If

            End If
        Next
    End Sub

    Public Sub Solve()
        ' creates a Solver and a Model
        Dim mySolverContext As SolverContext = SolverContext.GetContext
        mySolverContext.ClearModel()
        myModel = mySolverContext.CreateModel
        ' Decision variables
        AddDecisions()
        ' Constraints
        AddConstraints()
        ' Objective Function
        AddGoal()
        ' Solve
        mySolverContext.Solve()

        'UpdateDay()
        'UpdateAvailabilityandCheckins()

    End Sub

    Public Sub AddDecisions()
        Dim i, j As Integer
        'rooms
        For i = 0 To myRoomList.Count - 1
            'customers
            For j = 0 To myCustomerList.Count - 1
                Dim roomAssignment As New Decision(Domain.IntegerRange(0, 1), "Room_" & i & "_Customer_" & j)
                myDecisionMatrix(i, j) = roomAssignment
                myModel.AddDecision(roomAssignment)
            Next
        Next
    End Sub

    Public Sub AddConstraints()

        'ensures customers get a room better than or equal to their preference
        Dim pref As Term
        For j = 0 To myCustomerList.Count - 1
            pref = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                pref += currentDecision * myRoomList.Item(i).Type
            Next
            myModel.AddConstraint("RoomPreference_Cust_" & j, pref >= myCustomerList.Item(j).getPreference)
        Next

        'ensures customers are in a room large enough
        Dim occ As Term
        For j = 0 To myCustomerList.Count - 1
            occ = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                occ += currentDecision * myRoomList.Item(i).Occupancy
            Next
            myModel.AddConstraint("RoomSize_Cust_" & j, occ >= myCustomerList.Item(j).getSize)
        Next

        'ensures customers are only assigned one room
        Dim rooms As Term
        For j = 0 To myCustomerList.Count - 1
            rooms = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                rooms += currentDecision
            Next
            myModel.AddConstraint("One_Room_Per_Customer_" & j, rooms <= 1)
        Next

        'ensures rooms are only assigned one customer
        Dim customers As Term
        For i = 0 To myRoomList.Count - 1
            customers = 0
            For j = 0 To myCustomerList.Count - 1
                Dim currentCustomer As Customer = myCustomerList.Item(j)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                customers += currentDecision
            Next
            myModel.AddConstraint("One_Customer_Per_Room_" & i, customers <= 1)
        Next


    End Sub

    Public Sub AddGoal()
        Dim myGoal As Term = 0
        For i = 0 To myRoomList.Count - 1
            For j = 0 To myCustomerList.Count - 1
                myGoal += myDecisionMatrix(i, j) * myRoomList.Item(i).Rate
            Next
        Next

        myModel.AddGoal("Maximize_Profit", GoalKind.Maximize, myGoal)
    End Sub

    Public Function Results() As OptimizationResults
        'Dim count As Integer = 0
        'For i = 0 To myRoomList.Count - 1
        '    For j = 0 To myCustomerList.Count - 1
        '        If myDecisionMatrix(i, j).ToDouble = 1 Then
        '            count += 1
        '        End If
        '    Next
        'Next
        Return New OptimizationResults(myDecisionMatrix, myCustomerList, myRoomList)
    End Function
End Class
