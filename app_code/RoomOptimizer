Imports Microsoft.VisualBasic
Imports Microsoft.SolverFoundation.Services
'Room optimizer class creates and solves the optimization model for the problem of maximizing profit based on assigning customers to rooms
Public Class RoomOptimizer
    Private myCustomerList As List(Of Customer) 'the incoming list of customers should be only the customers checking in for the day
    Private myRoomList As List(Of Room) 'incoming list of rooms is only the rooms available
    Private myModel As Model
    Private myDecisionMatrix(,) As Decision
    Private Day As Integer

    Public Sub New(aCustomerList As List(Of Customer), aRoomList As List(Of Room), aDay As DateTime)
        myCustomerList = aCustomerList
        myRoomList = aRoomList
        Day = aDay.DayOfYear
        'Specify the size of the array of decision variables
        Dim size(myRoomList.Count - 1, myCustomerList.Count - 1) As Decision
        myDecisionMatrix = size
    End Sub

    Public Sub Solve()
        ' creates a Solver and a Model
        Dim mySolverContext As SolverContext = SolverContext.GetContext
        mySolverContext.ClearModel()
        myModel = mySolverContext.CreateModel
        ' Decision variables
        AddDecisions()
        ' Constraints
        AddConstraints()
        ' Objective Function
        AddGoal()
        ' Solve
        mySolverContext.Solve()

        'UpdateDay()
        'UpdateAvailabilityandCheckins()

    End Sub

    Public Sub AddDecisions()
        Dim i, j As Integer
        'rooms
        For i = 0 To myRoomList.Count - 1
            'customers
            For j = 0 To myCustomerList.Count - 1
                'decision variable is "room i is occupied by customer j"
                Dim roomAssignment As New Decision(Domain.IntegerRange(0, 1), "Room_" & i & "_Customer_" & j)
                myDecisionMatrix(i, j) = roomAssignment
                myModel.AddDecision(roomAssignment)
            Next
        Next
    End Sub

    Public Sub AddConstraints()

        'ensures customers get a room better than or equal to their preference
        Dim pref As Term
        For j = 0 To myCustomerList.Count - 1
            pref = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                pref += currentDecision * myRoomList.Item(i).Type
            Next
            myModel.AddConstraint("RoomPreference_Cust_" & j, pref >= myCustomerList.Item(j).getPreference)
        Next

        'ensures customers are in a room large enough
        Dim occ As Term
        For j = 0 To myCustomerList.Count - 1
            occ = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                occ += currentDecision * myRoomList.Item(i).Occupancy
            Next
            myModel.AddConstraint("RoomSize_Cust_" & j, occ >= myCustomerList.Item(j).getSize)
        Next

        'ensures customers are only assigned one room
        Dim rooms As Term
        For j = 0 To myCustomerList.Count - 1
            rooms = 0
            For i = 0 To myRoomList.Count - 1
                Dim currentRoom As Room = myRoomList.Item(i)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                rooms += currentDecision
            Next
            myModel.AddConstraint("One_Room_Per_Customer_" & j, rooms <= 1)
        Next

        'ensures rooms are only assigned one customer
        Dim customers As Term
        For i = 0 To myRoomList.Count - 1
            customers = 0
            For j = 0 To myCustomerList.Count - 1
                Dim currentCustomer As Customer = myCustomerList.Item(j)
                Dim currentDecision As Decision = myDecisionMatrix(i, j)
                customers += currentDecision
            Next
            myModel.AddConstraint("One_Customer_Per_Room_" & i, customers <= 1)
        Next


    End Sub

    Public Sub AddGoal()
        Dim myGoal As Term = 0
        For i = 0 To myRoomList.Count - 1
            For j = 0 To myCustomerList.Count - 1
                myGoal += myDecisionMatrix(i, j) * myRoomList.Item(i).Rate
            Next
        Next

        myModel.AddGoal("Maximize_Profit", GoalKind.Maximize, myGoal)
    End Sub

    Public Function Results() As OptimizationResults
        'creates an optimization results instance for the model solution
        Return New OptimizationResults(myDecisionMatrix, myCustomerList, myRoomList)
    End Function
End Class
