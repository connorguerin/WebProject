Imports Microsoft.VisualBasic
Imports Microsoft.SolverFoundation.Services
Imports System.Data
Public Class OptimizationResults
    Private myCustomerList As List(Of Customer)
    Private myRoomList As List(Of Room)
    Private myRoomAssignments(,) As Decision
    Private myEmployeeAssignments(,,) As Decision
    Private myEmployeeList As List(Of Employee)

    Public Sub New(ByVal aDecisionMatrix(,) As Decision, ByVal aCustomerList As List(Of Customer), ByVal aRoomList As List(Of Room))
        myRoomAssignments = aDecisionMatrix
        myCustomerList = aCustomerList
        myRoomList = aRoomList
    End Sub

    Public Sub New(ByVal aDecisionMatrix(,,) As Decision, ByVal anEmployeeList As List(Of Employee))
        myEmployeeAssignments = aDecisionMatrix
        myEmployeeList = anEmployeeList
    End Sub

    Public Function GetDecision(i As Integer, j As Integer) As Double
        If (i < myRoomList.Count And j < myCustomerList.Count) Then
            Return myRoomAssignments(i, j).ToDouble
        End If
        Return Nothing
    End Function

    Public Function RoomResultsToDataTable() As DataTable
        Dim returnTable As New DataTable
        returnTable.Columns.Add("Room")
        returnTable.Columns.Add("Customer")
        returnTable.Columns.Add("Visit ID")
        Dim occupied As Boolean
        Dim currentCustomer As Integer
        Dim foo As String = ""
        Dim rowIndex As Integer = -1
        For i = 0 To myRoomList.Count - 1
            currentCustomer = 0

            For j = 0 To myCustomerList.Count - 1
                occupied = False
                If myRoomAssignments(i, j).ToDouble = 1 Then
                    foo &= ("Room " & i & " occupied by customer " & j & vbCrLf)
                    occupied = True
                    currentCustomer = j
                End If

                If occupied Then
                    Dim newrow As DataRow = returnTable.NewRow
                    newrow("Room") = CStr(myRoomList.Item(i).RoomNum) & " Reserved By:"
                    newrow("Customer") = CStr(myCustomerList.Item(currentCustomer).getName)
                    newrow("Visit ID") = CStr(myCustomerList.Item(currentCustomer).getID)

                    returnTable.Rows.Add(newrow)
                    rowIndex += 1
                End If
            Next

        Next
        'possibly add code for changing the availability status of the room and changing the assignment of the customer
        Return returnTable
    End Function

    Public Function EmployeeResultsToDataTable() As DataTable
        'return table that has total employee numbers for each shift of each location
        'need to add Formatting for the table
        Dim returnTable As New DataTable
        Dim totalWorking As Integer
        For j = 0 To 5
            returnTable.NewRow
            For k = 0 To 3
                totalWorking = 0
                For i = 0 To myEmployeeList.Count - 1
                    totalWorking += myEmployeeAssignments(i, j, k).ToDouble
                Next
                returnTable.Rows.Item(j).Item(k) = totalWorking
            Next
        Next
        Return returnTable
    End Function
End Class
